<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django5+Vue3:OA系统前后端分离项目实战-添加部门表(5)</title>
    <url>/2024/08/07/Django5-Vue3-OA%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E6%B7%BB%E5%8A%A0%E9%83%A8%E9%97%A8%E8%A1%A8-5/</url>
    <content><![CDATA[<h1 id="Django5-Vue3-系列文章"><a href="#Django5-Vue3-系列文章" class="headerlink" title="Django5+Vue3 系列文章"></a>Django5+Vue3 系列文章</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此项目采用 Django 框架的 5.0.7 版本进行开发。<br>Django 5.0 支持的 Python 版本为 3.10、3.11 和 3.12。<br>OA 系统系列文章将持续更新，直至项目的 Docker 部署阶段。<br>CSDN 专栏链接: <a href="http://t.csdnimg.cn/oMuU0">~快捷传送门: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-详解部门表"><a href="#1-详解部门表" class="headerlink" title="1. 详解部门表"></a>1. 详解部门表</h3><p><img src="https://s2.loli.net/2024/08/07/OX2dkv6u1xPziE3.png"></p>
<ul>
<li>董事会：由张三和李四组成。</li>
<li>运营部：由一个领导(AA运营)负责，部门下有四名员工。</li>
<li>技术部：同样由一个领导(BB技术)负责，部门下有四名员工。</li>
<li>销售部：由一个领导(CC销售)负责，部门下有四名员工。</li>
<li>行政部：由一个领导(DD行政)负责，部门下也有四名员工。</li>
</ul>
<ul>
<li>AA运营,BB技术,CC销售,DD行政分别是四个部门的领导  </li>
<li>张三是运营部和技术部的经理。  </li>
<li>李四是销售部和行政部的经理。</li>
</ul>
<h2 id="新建部门表模型"><a href="#新建部门表模型" class="headerlink" title="新建部门表模型"></a>新建部门表模型</h2><h3 id="创建OADepartment部门表模型"><a href="#创建OADepartment部门表模型" class="headerlink" title="创建OADepartment部门表模型"></a>创建OADepartment部门表模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OADepartment</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    intro = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># leader: 目前假设一个部门只有一个leader,一个leader只能管理一个部门(非manager)</span></span><br><span class="line">    <span class="comment"># related_query_name: 用于跨表查询</span></span><br><span class="line">    leader = models.OneToOneField(OAUser, on_delete=models.SET_NULL, null=<span class="literal">True</span>,related_name=<span class="string">&quot;leader_department&quot;</span>, related_query_name=<span class="string">&quot;leader_department&quot;</span>)</span><br><span class="line">    <span class="comment"># manager: 一对多使用外键</span></span><br><span class="line">    manager = models.ForeignKey(OAUser, null=<span class="literal">True</span>, on_delete=models.SET_NULL,related_name=<span class="string">&quot;manager_departments&quot;</span>, related_query_name=<span class="string">&quot;manager_department&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>字段名讲解:</strong></p>
<ul>
<li>name: 字符串类型(最大长度为100)</li>
<li>intro: 字符串类型(最大长度为200)</li>
<li>leader: 一对一字段类型(可为空)</li>
<li>manager: 一对多字段类型(可为空)</li>
</ul>
</blockquote>
<h3 id="关联User与OADepartment"><a href="#关联User与OADepartment" class="headerlink" title="关联User与OADepartment"></a>关联User与OADepartment</h3><blockquote>
<p>此处，为了简单演示，每个用户只隶属于一个部门。可以尝试将部门的字段直接定义在User表上。</p>
</blockquote>
<p>因为OADepartment表定义在OAUser模型下方,此处外键引用使用’OADepartment’字符串形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">department = models.ForeignKey(<span class="string">&#x27;OADepartment&#x27;</span>, null=<span class="literal">True</span>,   on_delete=models.SET_NULL, related_name=<span class="string">&#x27;staffs&#x27;</span>, related_query_name=<span class="string">&quot;staffs&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips: 如果有时间，可以创建一张专门用于用户和部门绑定关系的表。这个关系是一种多对多的关系，也就是说一个用户可以隶属于多个部门。</p>
</blockquote>
<h2 id="模型映射"><a href="#模型映射" class="headerlink" title="模型映射"></a>模型映射</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<p><em>检查数据库（示例）：</em><br><img src="https://s2.loli.net/2024/08/07/FAahlku9xcPtXUw.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节概述了OADepartment模型的设计，包括其内部结构和与OAUser模型的关联，确保了模型在数据库的正确映射。</p>
]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Django5+Vue3:OA系统前后端分离项目实战-后端登录功能实现(7)</title>
    <url>/2024/08/07/Django5-Vue3-OA%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E5%90%8E%E7%AB%AF%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0-7/</url>
    <content><![CDATA[<h1 id="Django5-Vue3-系列文章"><a href="#Django5-Vue3-系列文章" class="headerlink" title="Django5+Vue3 系列文章"></a>Django5+Vue3 系列文章</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此项目采用 Django 框架的 5.0.7 版本进行开发。<br>Django 5.0 支持的 Python 版本为 3.10、3.11 和 3.12。<br>OA 系统系列文章将持续更新，直至项目的 Docker 部署阶段。<br>CSDN 专栏链接: <a href="http://t.csdnimg.cn/oMuU0">~快捷传送门: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<h2 id="登录验证流程：使用-Views-视图函数进行数据校验"><a href="#登录验证流程：使用-Views-视图函数进行数据校验" class="headerlink" title="登录验证流程：使用 Views 视图函数进行数据校验"></a>登录验证流程：使用 Views 视图函数进行数据校验</h2><h3 id="打开-apps-oaauth-views-py，定义视图函数"><a href="#打开-apps-oaauth-views-py，定义视图函数" class="headerlink" title="打开 apps&#x2F;oaauth&#x2F;views.py，定义视图函数"></a>打开 apps&#x2F;oaauth&#x2F;views.py，定义视图函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> apps.oaauth.serializers <span class="keyword">import</span> LoginSerializer, UserSerializer</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> .authentications <span class="keyword">import</span> generate_jwt</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># 登录只能用post方法向服务端发送请求</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="comment"># 1.验证数据是否可用，在此使用序列化校验数据库与客户端发送到数据</span></span><br><span class="line">        serializer = LoginSerializer(data=request.data)</span><br><span class="line">        <span class="comment"># 如果验证成功</span></span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            <span class="comment"># 间接获取数据库数据（attrs[&#x27;user&#x27;] = user）</span></span><br><span class="line">            user = serializer.validated_data.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">            <span class="comment"># 记录上次登陆的时间</span></span><br><span class="line">            user.last_login = datetime.now()</span><br><span class="line">            user.save()</span><br><span class="line">            <span class="comment"># 登陆成功，生成并返回JWT Token</span></span><br><span class="line">            token = generate_jwt(user)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;token&#x27;</span>: token, <span class="string">&#x27;user&#x27;</span>: UserSerializer(user).data&#125;)</span><br><span class="line">        <span class="comment"># 身份验证失败</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(serializer.errors)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;参数验证失败！&quot;</span>&#125;, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>在定义登录的视图函数时，身份验证是一个关键步骤，通常我们会使用序列化器来处理数据。为此，我们需要创建一个专门的序列化器来进行身份验证。<br>序列化器: 通过定义数据模型的规则和验证逻辑，确保接收到的数据符合预期格式并进行安全检查。</strong></p>
</blockquote>
<h2 id="数据验证自动化：Serializer-序列化器的应用"><a href="#数据验证自动化：Serializer-序列化器的应用" class="headerlink" title="数据验证自动化：Serializer 序列化器的应用"></a>数据验证自动化：Serializer 序列化器的应用</h2><h3 id="定义-LoginSerializer-并对-validate-方法进行重写"><a href="#定义-LoginSerializer-并对-validate-方法进行重写" class="headerlink" title="定义 LoginSerializer 并对 validate 方法进行重写"></a>定义 LoginSerializer 并对 validate 方法进行重写</h3><p>创建 apps&#x2F;oaauth&#x2F;serializers.py 文件，自定义序列化器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> OAUser, UserStatusChoices, OADepartment</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="comment"># 定义需要验证的字段</span></span><br><span class="line">    email = serializers.EmailField(required=<span class="literal">True</span>)  <span class="comment"># 电子邮箱字段，必填，验证为有效的邮箱格式</span></span><br><span class="line">    password = serializers.CharField(max_length=<span class="number">20</span>, min_length=<span class="number">6</span>)  <span class="comment"># 密码字段，必填，要求最少6个字符且最多20个字符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写validate方法，以实现自定义校验功能</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="comment"># attrs 包含 email 和 password 数据，从中获取这些数据</span></span><br><span class="line">        email = attrs.get(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">        password = attrs.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 验证成功的情况</span></span><br><span class="line">        <span class="keyword">if</span> email <span class="keyword">and</span> password:</span><br><span class="line">            <span class="comment"># 根据 email 查询用户</span></span><br><span class="line">            user = OAUser.objects.<span class="built_in">filter</span>(email=email).first()  <span class="comment"># 尝试获取对应邮箱的用户对象</span></span><br><span class="line">            <span class="comment"># 检查用户是否存在</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">                <span class="comment"># 如果用户不存在，抛出验证错误</span></span><br><span class="line">                <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;请输入正确的邮箱！&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 用户存在，校验密码</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> user.check_password(password):  <span class="comment"># 使用 Django 自带的方法检查密码</span></span><br><span class="line">                <span class="comment"># 如果密码不正确，抛出验证错误</span></span><br><span class="line">                <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;请输入正确的密码！&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 判断用户状态是否可用</span></span><br><span class="line">            <span class="keyword">if</span> user.status == UserStatusChoices.UNACTIVE:  <span class="comment"># 用户状态为未激活</span></span><br><span class="line">                <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;该用户尚未激活&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> user.status == UserStatusChoices.LOCKED:  <span class="comment"># 用户状态为锁定</span></span><br><span class="line">                <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;该账号已被锁定，请联系管理员！&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 视图函数中还会做登录操作，为了节省执行 SQL 语句的次数，将用户对象直接放入 attrs 中，方便在视图中使用</span></span><br><span class="line">            attrs[<span class="string">&#x27;user&#x27;</span>] = user</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果没有提供邮箱或密码，抛出验证错误</span></span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;请传入邮箱和密码！&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回包含验证后数据的字典</span></span><br><span class="line">        <span class="keyword">return</span> attrs</span><br></pre></td></tr></table></figure>

<h3 id="序列化模型定义与模型嵌套"><a href="#序列化模型定义与模型嵌套" class="headerlink" title="序列化模型定义与模型嵌套"></a>序列化模型定义与模型嵌套</h3><p><em>代码续写如下（示例）：</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 继承ModelSerializer模型, 避免重复定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DepartmentSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = OADepartment</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="comment"># 重写department</span></span><br><span class="line">    department = DepartmentSerializer()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = OAUser</span><br><span class="line">        <span class="comment"># fields = &quot;__all__&quot;</span></span><br><span class="line">        <span class="comment"># 排除不需要返回的字段(重要信息以及无需返回的数据)</span></span><br><span class="line">        exclude = (<span class="string">&quot;password&quot;</span>, <span class="string">&quot;groups&quot;</span>, <span class="string">&quot;user_permissions&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="JWT-Token-权限认证"><a href="#JWT-Token-权限认证" class="headerlink" title="JWT Token 权限认证"></a>JWT Token 权限认证</h2><h3 id="创建-apps-oaauth-authentications-py-文件"><a href="#创建-apps-oaauth-authentications-py-文件" class="headerlink" title="创建 apps\oaauth\ authentications.py 文件"></a><span style="color:red">创建</span> apps\oaauth\ <span style="color:red">authentications.py 文件</span></h3><blockquote>
<p>使用 JWT Token 进行验证的好处在于它提供了一种自包含、安全且易于在不同服务间传递用户身份信息的方式，同时减少了对服务器的依赖，提高了系统的扩展性和响应速度。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication, get_authorization_header</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line"><span class="keyword">from</span> jwt.exceptions <span class="keyword">import</span> ExpiredSignatureError</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> OAUser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_jwt</span>(<span class="params">user</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成JWT Token，用于身份验证。</span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    user (OAUser): 当前登录的用户对象，通常是经过身份验证后的用户</span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    str: 生成的JWT Token，这个Token包含用户的唯一标识和过期时间</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 设置Token的过期时间为7天后</span></span><br><span class="line">    expire_time = time.time() + <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span></span><br><span class="line">    <span class="comment"># 创建JWT Token，包含用户ID和过期时间，使用SECRET_KEY进行签名</span></span><br><span class="line">    <span class="keyword">return</span> jwt.encode(&#123;<span class="string">&#x27;userid&#x27;</span>: user.pk, <span class="string">&#x27;exp&#x27;</span>: expire_time&#125;, key=settings.SECRET_KEY, algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JWTAuthentication</span>(<span class="title class_ inherited__">BaseAuthentication</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义JWT认证类，用于在Django REST Framework中进行JWT认证。</span></span><br><span class="line"><span class="string">    这个类将处理从请求中提取JWT，验证其有效性，并返回对应的用户对象。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    keyword = <span class="string">&#x27;JWT&#x27;</span>  <span class="comment"># 认证头部关键字，通常是&#x27;JWT&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">authentication</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从请求对象中提取并验证JWT Token，以进行身份验证。</span></span><br><span class="line"><span class="string">        参数:</span></span><br><span class="line"><span class="string">        request (HttpRequest): HTTP请求对象，可以是来自客户端的HTTP请求</span></span><br><span class="line"><span class="string">        返回:</span></span><br><span class="line"><span class="string">        tuple: (user, token) 用户对象和JWT Token，如果认证失败则返回None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 从请求头中获取Authorization字段，并按空格分割</span></span><br><span class="line">        auth = get_authorization_header(request).split()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查Authorization头部是否存在，并且是否以&#x27;JWT&#x27;关键字开头</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> auth <span class="keyword">or</span> auth[<span class="number">0</span>].lower() != <span class="variable language_">self</span>.keyword.lower().encode():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 认证失败，返回None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查Token的格式是否正确，确保有且只有一个Token</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(auth) == <span class="number">1</span>:</span><br><span class="line">            msg = <span class="string">&#x27;不可用的JWT请求头！&#x27;</span>  <span class="comment"># Token缺失信息</span></span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)  <span class="comment"># 抛出认证失败异常</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(auth) &gt; <span class="number">2</span>:</span><br><span class="line">            msg = <span class="string">&#x27;不可用的JWT请求头！JWT Token中间不应该有空格！&#x27;</span>  <span class="comment"># Token包含多余的空格</span></span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)  <span class="comment"># 抛出认证失败异常</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 提取Token并解码</span></span><br><span class="line">            jwt_token = auth[<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 使用SECRET_KEY解码Token</span></span><br><span class="line">            jwt_info = jwt.decode(jwt_token, settings.SECRET_KEY, algorithms=[<span class="string">&quot;HS256&quot;</span>])</span><br><span class="line">            userid = jwt_info[<span class="string">&#x27;userid&#x27;</span>]  <span class="comment"># 获取用户ID</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 根据用户ID查找用户，确保用户存在</span></span><br><span class="line">                user = OAUser.objects.get(pk=userid)</span><br><span class="line">                <span class="built_in">setattr</span>(request, <span class="string">&#x27;user&#x27;</span>, user)  <span class="comment"># 将用户对象绑定到request上，方便后续使用</span></span><br><span class="line">                <span class="keyword">return</span> user, jwt_token  <span class="comment"># 返回用户对象和JWT Token</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> OAUser.DoesNotExist:</span><br><span class="line">                msg = <span class="string">&quot;JWT Token对应的用户不存在&quot;</span>  <span class="comment"># 如果找不到用户ID</span></span><br><span class="line">                <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)  <span class="comment"># 抛出认证失败异常</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> ExpiredSignatureError:</span><br><span class="line">            msg = <span class="string">&quot;JWT Token已过期！&quot;</span>  <span class="comment"># 处理Token过期情况</span></span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)  <span class="comment"># 抛出认证失败异常</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> jwt.DecodeError:</span><br><span class="line">            msg = <span class="string">&quot;无效的JWT Token&quot;</span>  <span class="comment"># Token解码失败</span></span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)  <span class="comment"># 抛出认证失败异常</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><span style="color:purple">(๑•̀ㅂ•́) ✧ </span> <span style="color:pink;">点赞加收藏突破 100，额外加更一期 JWT Token 权限认证系列文章!!!</span></p>
</blockquote>
<h2 id="路由映射"><a href="#路由映射" class="headerlink" title="路由映射"></a>路由映射</h2><h3 id="创建-apps-oaauth-urls-py-文件"><a href="#创建-apps-oaauth-urls-py-文件" class="headerlink" title="创建 apps\oaauth\ urls.py 文件"></a><span style="color:red">创建</span> apps\oaauth\ <span style="color:red">urls.py 文件</span></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># 应用命名空间</span></span><br><span class="line">app_name = <span class="string">&#x27;oaauth&#x27;</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># .as_view() 方法会返回一个接受请求参数的可调用对象，这样 Django 就可以正确地将请求分派给类视图的方法</span></span><br><span class="line">    path(<span class="string">&#x27;login&#x27;</span>,views.LoginView.as_view(),name=<span class="string">&#x27;login&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="项目根目录添加子路由"><a href="#项目根目录添加子路由" class="headerlink" title="项目根目录添加子路由"></a>项目根目录添加子路由</h3><p>打开项目根目录的 oaback\urls.py 文件，添加子路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;admin/&quot;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;auth/&quot;</span>,include(<span class="string">&#x27;apps.oaauth.urls&#x27;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="Postman-测试"><a href="#Postman-测试" class="headerlink" title="Postman 测试"></a>Postman 测试</h2><h3 id="验证-失败情况示例"><a href="#验证-失败情况示例" class="headerlink" title="验证:失败情况示例"></a>验证:失败情况示例</h3><p><img src="https://s2.loli.net/2024/08/07/G26jz1QbTLwB8tU.png"></p>
<h3 id="验证-成功情况示例"><a href="#验证-成功情况示例" class="headerlink" title="验证:成功情况示例"></a>验证:成功情况示例</h3><p><img src="https://s2.loli.net/2024/08/07/J5qEuWcovhbOHVP.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</span></h2><p>本节内容成功实现了后端的登录和身份验证功能，并通过 Postman 工具进行了全面的测试验证。</p>
]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Django5+Vue3:OA系统前后端分离项目实战-修改OAUser模型主键(4)</title>
    <url>/2024/08/07/Django5-Vue3-OA%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E4%BF%AE%E6%94%B9OAUser%E6%A8%A1%E5%9E%8B%E4%B8%BB%E9%94%AE-4/</url>
    <content><![CDATA[<h1 id="Django5-Vue3-系列文章"><a href="#Django5-Vue3-系列文章" class="headerlink" title="Django5+Vue3 系列文章"></a>Django5+Vue3 系列文章</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此项目采用 Django 框架的 5.0.7 版本进行开发。<br>Django 5.0 支持的 Python 版本为 3.10、3.11 和 3.12。<br>OA 系统系列文章将持续更新，直至项目的 Docker 部署阶段。<br>CSDN 专栏链接: <a href="http://t.csdnimg.cn/oMuU0">~快捷传送门: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><h3 id="shortuuid"><a href="#shortuuid" class="headerlink" title="shortuuid"></a><a href="https://pypi.org/project/shortuuid/">shortuuid</a></h3><blockquote>
<p>使用 shortuuid 可以生成短小、唯一、随机的标识符，为数据库提供跨平台兼容性、增强隐私性、减少存储空间和避免 ID 冲突等优势，比默认生成的自动增长的 id 更具有安全性。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install shortuuid</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/08/07/IBsHu3wcfhrEd8b.png"></p>
<h3 id="django-shortuuidfield"><a href="#django-shortuuidfield" class="headerlink" title="django-shortuuidfield"></a><a href="https://pypi.org/project/django-shortuuidfield/">django-shortuuidfield</a></h3><blockquote>
<p>django-shortuuidfield 是一个 Django 应用程序，它提供了一个用于 Django 模型的 ShortUUIDField 字段，该字段使用 shortuuid 库来生成短小且唯一的 UUID。<br>Tips:此项目使用 django-shortuuidfield，已包含 uuid 库无需单&gt;独下载 shortuuid。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-shortuuidfield</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/08/07/fLZ1B5qjAOtvRrh.png"></p>
<h2 id="配置-ShortUUIDField"><a href="#配置-ShortUUIDField" class="headerlink" title="配置 ShortUUIDField"></a>配置 ShortUUIDField</h2><h3 id="从-shortuuidfield-中导入-ShortUUIDField"><a href="#从-shortuuidfield-中导入-ShortUUIDField" class="headerlink" title="从 shortuuidfield 中导入 ShortUUIDField"></a>从 shortuuidfield 中导入 ShortUUIDField</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> shortuuidfield <span class="keyword">import</span> ShortUUIDField</span><br></pre></td></tr></table></figure>

<h3 id="添加至-OAUser-模型"><a href="#添加至-OAUser-模型" class="headerlink" title="添加至 OAUser 模型"></a>添加至 OAUser 模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">uid = ShortUUIDField(primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="重建数据库"><a href="#重建数据库" class="headerlink" title="重建数据库"></a>重建数据库</h2><blockquote>
<p>由于主键的更改会对数据库结构产生重大影响，直接进行迁移可能会导致依赖于 User 表的其他表出现故障。因此，需要先删除所有引用了 User 表的表，然后再重新生成这些表以确保数据库的一致性和功能的完整性。</p>
</blockquote>
<h3 id="MySQL-重建数据库-oa"><a href="#MySQL-重建数据库-oa" class="headerlink" title="MySQL 重建数据库 oa"></a>MySQL 重建数据库 oa</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> oa;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE oa <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br></pre></td></tr></table></figure>

<h3 id="删除残留迁移文件"><a href="#删除残留迁移文件" class="headerlink" title="删除残留迁移文件"></a>删除残留迁移文件</h3><p>迁移文件位于: apps–&gt;oaauth–&gt;migrations–&gt;0001_initial.py<br><img src="https://s2.loli.net/2024/08/07/2FWNKqiZvfQX7lY.png"></p>
<h2 id="模型映射"><a href="#模型映射" class="headerlink" title="模型映射"></a>模型映射</h2><p><em>终端依次执行如下（示例）：</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p><em>检查数据库（示例）：</em><br><img src="https://s2.loli.net/2024/08/07/a4DPKuHkA6gphOz.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节介绍了通过安装 django-shortuuidfield，实现数据库的重新初始化和模型迁移，以 UUID 增强实际情况下企业的信息安全。</p>
]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Django5+Vue3:OA系统前后端分离项目实战-自定义命令初始化(6)</title>
    <url>/2024/08/07/Django5-Vue3-OA%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4%E5%88%9D%E5%A7%8B%E5%8C%96-6/</url>
    <content><![CDATA[<h1 id="Django5-Vue3-系列文章"><a href="#Django5-Vue3-系列文章" class="headerlink" title="Django5+Vue3 系列文章"></a>Django5+Vue3 系列文章</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此项目采用 Django 框架的 5.0.7 版本进行开发。<br>Django 5.0 支持的 Python 版本为 3.10、3.11 和 3.12。<br>OA 系统系列文章将持续更新，直至项目的 Docker 部署阶段。<br>CSDN 专栏链接: <a href="http://t.csdnimg.cn/oMuU0">~快捷传送门: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>为了确保命令行工具在应用程序中有效运行，必须先安装应用程序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装rest_framework</span></span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="comment"># 安装django-cors-headers</span></span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    <span class="comment"># 安装oaauth应用</span></span><br><span class="line">    <span class="string">&#x27;apps.oaauth&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>以下是创建命令行工具的步骤：</p>
<blockquote>
<ol>
<li>在应用程序的 oaauth 文件夹中，创建一个名为 management 的 Python 包。确保包含 <strong>init</strong>.py 文件，这是 Python 识别该目录为包的必要文件。</li>
<li>在 management 包内，进一步创建一个名为 commands 的子包。</li>
<li>在 commands 包中，根据您的命令功能，创建相应的 Python 脚本文件。这些文件的名称将直接映射为可执行的命令名称。</li>
</ol>
</blockquote>
<blockquote>
<p><strong>Tips:</strong></p>
<ul>
<li>命令的执行依赖于应用程序的安装状态，即自定义命令的名称为文件名称。</li>
<li>确保每个包都遵循 Python 的包结构规范，包含必要的<code>__init__.py</code> 文件。<br><span style="color:oklch(90% 0.4 240); display:flex; justify-content:center;">—以上均为固定写法—</span></li>
</ul>
</blockquote>
<p>项目结构如下（示例）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">├─apps</span><br><span class="line">│  │  __init__.py</span><br><span class="line">│  │</span><br><span class="line">│  ├─oaauth</span><br><span class="line">│  │  │</span><br><span class="line">│  │  ├─management</span><br><span class="line">│  │  │  │  __init__.py</span><br><span class="line">│  │  │  │</span><br><span class="line">│  │  │  ├─commands</span><br><span class="line">│  │  │  │  │  initdepartments.py</span><br><span class="line">│  │  │  │  │  inituser.py</span><br><span class="line">│  │  │  │  │  __init__.py</span><br></pre></td></tr></table></figure>

<h2 id="初始化部门数据"><a href="#初始化部门数据" class="headerlink" title="初始化部门数据"></a>初始化部门数据</h2><h3 id="在创建的-initdepartments-py-文件中，配置初始化部门数据"><a href="#在创建的-initdepartments-py-文件中，配置初始化部门数据" class="headerlink" title="在创建的 initdepartments.py 文件中，配置初始化部门数据"></a>在创建的 initdepartments.py 文件中，配置初始化部门数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.management.base <span class="keyword">import</span> BaseCommand</span><br><span class="line"><span class="keyword">from</span> apps.oaauth.models <span class="keyword">import</span> OADepartment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span>(<span class="title class_ inherited__">BaseCommand</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self,*args, **options</span>):</span><br><span class="line">        <span class="comment"># 初始化部门数据</span></span><br><span class="line">        boarder = OADepartment.objects.create(name=<span class="string">&#x27;董事会&#x27;</span>, intro=<span class="string">&#x27;董事会&#x27;</span>)</span><br><span class="line">        developer = OADepartment.objects.create(name=<span class="string">&#x27;产品开发部&#x27;</span>, intro=<span class="string">&#x27;产品设计，技术开发&#x27;</span>)</span><br><span class="line">        operator = OADepartment.objects.create(name=<span class="string">&#x27;运营部&#x27;</span>, intro=<span class="string">&#x27;客户运营，产品运营&#x27;</span>)</span><br><span class="line">        saler = OADepartment.objects.create(name=<span class="string">&#x27;销售部&#x27;</span>, intro=<span class="string">&#x27;销售产品&#x27;</span>)</span><br><span class="line">        hr = OADepartment.objects.create(name=<span class="string">&#x27;人事部&#x27;</span>, intro=<span class="string">&#x27;员工招聘，员工培训，员工考核&#x27;</span>)</span><br><span class="line">        finance = OADepartment.objects.create(name=<span class="string">&#x27;财务部&#x27;</span>, intro=<span class="string">&#x27;财务报表，财务审核&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.stdout.write(<span class="string">&#x27;部门数据初始化成功！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>完成编写后，无需手动保存。create 方法已自动将数据同步至数据库。</p>
</blockquote>
<h3 id="终端执行自定义命令将模型同步至数据库"><a href="#终端执行自定义命令将模型同步至数据库" class="headerlink" title="终端执行自定义命令将模型同步至数据库"></a>终端执行自定义命令将模型同步至数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py initdepartments</span><br></pre></td></tr></table></figure>

<p>此时终端将会输出 <strong>部门数据初始化成功！</strong></p>
<h3 id="检查数据库-部门数据初始化成功"><a href="#检查数据库-部门数据初始化成功" class="headerlink" title="检查数据库:部门数据初始化成功"></a>检查数据库:部门数据初始化成功</h3><p><img src="https://s2.loli.net/2024/08/07/dhszHeOig1x3lZj.png"></p>
<h2 id="初始化用户数据"><a href="#初始化用户数据" class="headerlink" title="初始化用户数据"></a>初始化用户数据</h2><h3 id="在创建的-inituser-py-文件中，配置初始化部门数据"><a href="#在创建的-inituser-py-文件中，配置初始化部门数据" class="headerlink" title="在创建的 inituser.py 文件中，配置初始化部门数据"></a>在创建的 inituser.py 文件中，配置初始化部门数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.management.base <span class="keyword">import</span> BaseCommand</span><br><span class="line"><span class="keyword">from</span> apps.oaauth.models <span class="keyword">import</span> OAUser, OADepartment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span>(<span class="title class_ inherited__">BaseCommand</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self, *args, **options</span>):</span><br><span class="line">        boarder = OADepartment.objects.get(name=<span class="string">&#x27;董事会&#x27;</span>)</span><br><span class="line">        developer = OADepartment.objects.get(name=<span class="string">&#x27;产品开发部&#x27;</span>)</span><br><span class="line">        operator = OADepartment.objects.get(name=<span class="string">&#x27;运营部&#x27;</span>)</span><br><span class="line">        saler = OADepartment.objects.get(name=<span class="string">&#x27;销售部&#x27;</span>)</span><br><span class="line">        hr = OADepartment.objects.get(name=<span class="string">&#x27;人事部&#x27;</span>)</span><br><span class="line">        finance = OADepartment.objects.get(name=<span class="string">&#x27;财务部&#x27;</span>)</span><br><span class="line">        <span class="comment"># 董事会的员工,都是superuser用户</span></span><br><span class="line">        <span class="comment"># 1. 东东：属于董事会的leader</span></span><br><span class="line">        dongdong = OAUser.objects.create_superuser(email=<span class="string">&quot;dongdong@qq.com&quot;</span>,realname=<span class="string">&quot;东东&quot;</span>,password=<span class="string">&quot;111111&quot;</span>,department=boarder)</span><br><span class="line">        <span class="comment"># 2. 多多：董事会</span></span><br><span class="line">        duoduo = OAUser.objects.create_superuser(email=<span class="string">&quot;duoduo@qq.com&quot;</span>,realname=<span class="string">&quot;多多&quot;</span>,password=<span class="string">&quot;111111&quot;</span>,department=boarder)</span><br><span class="line">        <span class="comment"># 3. 张三：产品开发部的leader</span></span><br><span class="line">        zhangsan = OAUser.objects.create_user(email=<span class="string">&quot;zhangsan@qq.com&quot;</span>,realname=<span class="string">&quot;张三&quot;</span>,password=<span class="string">&quot;111111&quot;</span>,department=developer)</span><br><span class="line">        <span class="comment"># 4.李四：运营部的leader</span></span><br><span class="line">        lisi = OAUser.objects.create_user(email=<span class="string">&quot;lisi@qq.com&quot;</span>,realname=<span class="string">&quot;李四&quot;</span>,password=<span class="string">&quot;111111&quot;</span>,department=operator)</span><br><span class="line">        <span class="comment"># 5. 王五：人事部的leader</span></span><br><span class="line">        wangwu = OAUser.objects.create_user(email=<span class="string">&quot;wangwu@qq.com&quot;</span>,realname=<span class="string">&quot;王五&quot;</span>,password=<span class="string">&quot;111111&quot;</span>,department=hr)</span><br><span class="line">        <span class="comment"># 6. 赵六：财务部的leader</span></span><br><span class="line">        zhaoliu = OAUser.objects.create_user(email=<span class="string">&quot;zhaoliu@qq.com&quot;</span>,realname=<span class="string">&quot;赵六&quot;</span>,password=<span class="string">&quot;111111&quot;</span>,department=finance)</span><br><span class="line">        <span class="comment"># 7. 孙七：销售部的leader</span></span><br><span class="line">        sunqi = OAUser.objects.create_user(email=<span class="string">&quot;sunqi@qq.com&quot;</span>,realname=<span class="string">&quot;孙七&quot;</span>,password=<span class="string">&quot;111111&quot;</span>,department=saler)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 给部门指定leader和manager</span></span><br><span class="line">        <span class="comment"># 1. 董事会</span></span><br><span class="line">        boarder.leader = dongdong</span><br><span class="line">        boarder.manager = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.产品开发部</span></span><br><span class="line">        developer.leader = zhangsan</span><br><span class="line">        developer.manager = dongdong</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3.运营部</span></span><br><span class="line">        operator.leader = lisi</span><br><span class="line">        operator.manager = dongdong</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4.销售部</span></span><br><span class="line">        saler.leader = sunqi</span><br><span class="line">        saler.manager = dongdong</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5.人事部</span></span><br><span class="line">        hr.leader = wangwu</span><br><span class="line">        hr.manager = duoduo</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 6.财务部</span></span><br><span class="line">        finance.leader = zhaoliu</span><br><span class="line">        finance.manager = duoduo</span><br><span class="line"></span><br><span class="line">        boarder.save()</span><br><span class="line">        developer.save()</span><br><span class="line">        operator.save()</span><br><span class="line">        saler.save()</span><br><span class="line">        hr.save()</span><br><span class="line">        finance.save()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.stdout.write(<span class="string">&#x27;初始用户创建成功！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果看不懂模型字段的设计逻辑请自行前往 <a href="http://t.csdnimg.cn/Atp5H"><del>部门表设计: 点个赞再走呗 😭</del></a></p>
</blockquote>
<h3 id="终端执行自定义命令将模型同步至数据库-1"><a href="#终端执行自定义命令将模型同步至数据库-1" class="headerlink" title="终端执行自定义命令将模型同步至数据库"></a>终端执行自定义命令将模型同步至数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py inituser</span><br></pre></td></tr></table></figure>

<p>此时终端将会输出 <strong>初始用户创建成功！</strong></p>
<p><strong>嘿嘿! 是不是有人报错了? 😂</strong></p>
<blockquote>
<p>在之前的敲代码时，如果已经执行了相关代码，导致数据库中<strong>已经存在了部分用户数据</strong>，您可以选择清除这些数据。如果遇到删除操作失败的情况，这可能是因为 department 表与 user 表之间存在<strong>双向引用关系</strong>，导致数据无法直接删除。<br>在这种情况下，博主推荐采取一种更为<strong>暴力直接</strong>的方法：即删除现有的 oa 数据库，然后重新初始化一个新的 oa 数据库<br>不知道方法的可以跳转到专栏下的另一篇文章: <a href="http://t.csdnimg.cn/n9M3z">~数据库重建: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<p>重建数据库之后再依次终端输入以下指令完成模型映射:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line"></span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line">python manage.py initdepartments</span><br><span class="line"></span><br><span class="line">python manage.py inituser</span><br></pre></td></tr></table></figure>

<p><strong>到此，测试数据已经全部完成了! 如果觉得博主写的够详细的话就留杯奶茶再走呗!💏</strong><br><strong>您的支持就是我的动力!（￣ ▽ ￣）↗</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节详细讲解了如何创建自定义命令，以及如何通过自定义命令来初始化数据，有效地解决了项目部署后数据预设的需求。</p>
]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Django5+Vue3:OA系统前后端分离项目实战-跨域请求配置(2)</title>
    <url>/2024/08/06/Django5-Vue3-OA%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE-2/</url>
    <content><![CDATA[<h1 id="Django5-Vue3-系列文章"><a href="#Django5-Vue3-系列文章" class="headerlink" title="Django5+Vue3 系列文章"></a>Django5+Vue3 系列文章</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此项目采用 Django 框架的 5.0.7 版本进行开发。<br>Django 5.0 支持的 Python 版本为 3.10、3.11 和 3.12。<br>OA 系统系列文章将持续更新，直至项目的 Docker 部署阶段。<br>CSDN 专栏链接: <a href="http://t.csdnimg.cn/oMuU0">~快捷传送门: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<h2 id="前后端分离项目中的跨域请求问题"><a href="#前后端分离项目中的跨域请求问题" class="headerlink" title="前后端分离项目中的跨域请求问题"></a>前后端分离项目中的跨域请求问题</h2><p>本项目采用前后端分离架构，前端与后端部署在不同端口，导致它们运行在不同的域名下。例如，前端页面通过<code>http://127.0.0.1:5173</code>访问，而后端服务位于<code>http://127.0.0.1:8000</code>。这种情况下，前端向服务器请求数据时会触发跨域请求。<br>跨域请求的成功与否取决于服务端设置，只有服务端明确允许，前端才能成功访问数据。<br>简而言之，前端与后端的交互需要服务端的跨域配置支持。</p>
<h2 id="跨域请求配置"><a href="#跨域请求配置" class="headerlink" title="跨域请求配置"></a>跨域请求配置</h2><h3 id="下载跨域请求工具"><a href="#下载跨域请求工具" class="headerlink" title="下载跨域请求工具"></a>下载跨域请求工具</h3><p><a href="https://pypi.org/project/django-cors-headers/">django-cors-headers</a> : Django 的一个第三方库，用于处理跨域资源共享（CORS）问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/08/06/GC5BKDebfp7iJnl.png" alt="image"><br><strong>Successfuly installdjango-cors-headers-4.4.0: 下载成功</strong></p>
<p><img src="https://s2.loli.net/2024/08/06/AOHwDdgUeKXV8rJ.png" alt="image"></p>
<h3 id="settings-配置跨域请求应用"><a href="#settings-配置跨域请求应用" class="headerlink" title="settings 配置跨域请求应用"></a>settings 配置跨域请求应用</h3><h4 id="django-cors-headers-安装"><a href="#django-cors-headers-安装" class="headerlink" title="django-cors-headers 安装"></a>django-cors-headers 安装</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装rest_framework</span></span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="comment"># 安装django-cors-headers</span></span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="中间件配置"><a href="#中间件配置" class="headerlink" title="中间件配置"></a>中间件配置</h4><blockquote>
<p><strong>Tips:</strong> CorsMiddleware 应该放在尽可能优先的位置，特别是在任何可以产生响应的中间件之前，比如 Django 的 CommonMiddleware 或 Whitenoise 的 WhiteNoiseMiddleware。如果不在此之前设置，就无法在这些响应中添加 CORS 头信息。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">​​​MIDDLEWARE = [</span><br><span class="line">    <span class="string">&quot;django.middleware.security.SecurityMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions.middleware.SessionMiddleware&quot;</span>,</span><br><span class="line">    <span class="comment"># 中间件按顺序执行,一定要在CommonMiddleware前面,否则会出现跨域请求失败的问题</span></span><br><span class="line">    <span class="string">&quot;corsheaders.middleware.CorsMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.common.CommonMiddleware&quot;</span>,</span><br><span class="line">    <span class="comment"># 关闭CSRF保护</span></span><br><span class="line">    <span class="comment"># &quot;django.middleware.csrf.CsrfViewMiddleware&quot;,</span></span><br><span class="line">    <span class="string">&quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages.middleware.MessageMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.clickjacking.XFrameOptionsMiddleware&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="跨域访问权限配置"><a href="#跨域访问权限配置" class="headerlink" title="跨域访问权限配置"></a>跨域访问权限配置</h4><blockquote>
<p><strong>Tips:</strong> 开发阶段几乎不存在安全问题,设置为 True 便于后续开发</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">​​<span class="comment"># 允许所有域名跨域访问(手动添加至settings.py文件中)</span></span><br><span class="line">CORS_ALLOW_ALL_ORIGINS = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节详细介绍了在 Django 开发过程中遇到的跨域请求问题，并展示了相应的解决方案和配置方法。更多跨域详情请访问官方文档自行阅读 –&gt; <a href="https://pypi.org/project/django-cors-headers/">django-cors-headers 官方文档传送门</a></p>
]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Django5+Vue3:OA系统前后端分离项目实战-重写User模型(3)</title>
    <url>/2024/08/07/Django5-Vue3-OA%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E9%87%8D%E5%86%99User%E6%A8%A1%E5%9E%8B-3/</url>
    <content><![CDATA[<h1 id="Django5-Vue3-系列文章"><a href="#Django5-Vue3-系列文章" class="headerlink" title="Django5+Vue3 系列文章"></a>Django5+Vue3 系列文章</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此项目采用 Django 框架的 5.0.7 版本进行开发。<br>Django 5.0 支持的 Python 版本为 3.10、3.11 和 3.12。<br>OA 系统系列文章将持续更新，直至项目的 Docker 部署阶段。<br>CSDN 专栏链接: <a href="http://t.csdnimg.cn/oMuU0">~快捷传送门: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<h2 id="国内外-User-模型的差异"><a href="#国内外-User-模型的差异" class="headerlink" title="国内外 User 模型的差异"></a>国内外 User 模型的差异</h2><p>尽管 Django 的 User 模型设计成熟，但由于国内外使用环境差异，存在一些不适用和缺失的功能，例如缺少对手机号的支持，以及国外姓名分为 first_name 和 last_name。为了解决这个问题，我们不直接替换原有的 User 模型，而是选择扩展它。这样，我们可以自定义 User 模型以适应国内环境，同时保留 Django 强大的内建认证系统功能。通过重写 User 对象，我们实现了模型的本地化定制，确保了功能的完整性和扩展性。</p>
<h2 id="重写-User-模型"><a href="#重写-User-模型" class="headerlink" title="重写 User 模型"></a>重写 User 模型</h2><h3 id="终端创建-django-应用"><a href="#终端创建-django-应用" class="headerlink" title="终端创建 django 应用"></a>终端创建 django 应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py startapp oaauth</span><br></pre></td></tr></table></figure>

<p>如果出现如下创建失败，请自行选择 MySQL 数据库驱动程序:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.</span><br><span class="line">Did you install mysqlclient?</span><br></pre></td></tr></table></figure>

<p>从性能上推荐 mysqlclient，从操作简易性推荐使用 pymysql，此处使用 pymysql 示例（终端下载 pymysql）:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请自行手动添加到项目根目录的__init__.py文件中</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时再次运行 python manage.py startapp oaauth，则名为 oaauth 的应用创建成功</p>
</blockquote>
<h3 id="创建-apps-管理包"><a href="#创建-apps-管理包" class="headerlink" title="创建 apps 管理包"></a>创建 apps 管理包</h3><blockquote>
<p>因为项目会创建众多 app 应用，为了方便管理在此创建一个名为 apps 的软件包进行统一管理</p>
</blockquote>
<p>Tips: 创建完成后需将 oaauth 应用文件夹放进 oaauth 文件夹中，如下:</p>
<p><img src="https://s2.loli.net/2024/08/07/2HsQ18kSwvgeTm7.png"></p>
<p><img src="https://s2.loli.net/2024/08/07/aDZPN1Gj2zQSp4l.png"></p>
<h3 id="settings-安装-oaauth-应用"><a href="#settings-安装-oaauth-应用" class="headerlink" title="settings 安装 oaauth 应用"></a>settings 安装 oaauth 应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装rest_framework</span></span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="comment"># 安装django-cors-headers</span></span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;apps.oaauth&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="重写-User-模型-1"><a href="#重写-User-模型-1" class="headerlink" title="重写 User 模型"></a>重写 User 模型</h3><blockquote>
<p>打开 apps –&gt; oaauth –&gt;models.py 文件</p>
</blockquote>
<h4 id="导入-User-模型"><a href="#导入-User-模型" class="headerlink" title="导入 User 模型"></a>导入 User 模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br></pre></td></tr></table></figure>

<h4 id="复制-User-模型"><a href="#复制-User-模型" class="headerlink" title="复制 User 模型"></a>复制 User 模型</h4><blockquote>
<p>由于 User 模型基于 AbstractUser 扩展，而 AbstractUser 又继承自 AbstractBaseUser 和 PermissionsMixin，我们选择在 AbstractUser 类上进行重写，复制其代码以实现自定义。</p>
</blockquote>
<h4 id="重写-User-模型-2"><a href="#重写-User-模型-2" class="headerlink" title="重写 User 模型"></a>重写 User 模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">​​<span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, AbstractBaseUser, PermissionsMixin, BaseUserManager</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers <span class="keyword">import</span> make_password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserStatusChoices</span>(models.IntegerChoices):</span><br><span class="line">    <span class="comment"># 已经激活</span></span><br><span class="line">    ACTIVED = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 没有激活</span></span><br><span class="line">    UNACTIVE = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 被锁定</span></span><br><span class="line">    LOCKED = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OAUserManager</span>(<span class="title class_ inherited__">BaseUserManager</span>):</span><br><span class="line">    use_in_migrations = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 密码源自于AbstractBaseUser类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_create_user</span>(<span class="params">self, realname, email, password, **extra_fields</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建用户</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> realname:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;必须设置真实姓名! &quot;</span>)</span><br><span class="line">        email = <span class="variable language_">self</span>.normalize_email(email)  <span class="comment"># 邮箱标准化</span></span><br><span class="line">        user = <span class="variable language_">self</span>.model(realname=realname, email=email, **extra_fields)  <span class="comment"># 此处的self.model实际上等于OAUser</span></span><br><span class="line">        user.password = make_password(password)</span><br><span class="line">        user.save(using=<span class="variable language_">self</span>._db)</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_user</span>(<span class="params">self, realname, email=<span class="literal">None</span>, password=<span class="literal">None</span>, **extra_fields</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建普通用户</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        extra_fields.setdefault(<span class="string">&quot;is_staff&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">        extra_fields.setdefault(<span class="string">&quot;is_superuser&quot;</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._create_user(realname, email, password, **extra_fields)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_superuser</span>(<span class="params">self, realname, email=<span class="literal">None</span>, password=<span class="literal">None</span>, **extra_fields</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建超级用户</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        extra_fields.setdefault(<span class="string">&quot;is_staff&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">        extra_fields.setdefault(<span class="string">&quot;is_superuser&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">        extra_fields.setdefault(<span class="string">&quot;status&quot;</span>, UserStatusChoices.ACTIVED)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> extra_fields.get(<span class="string">&quot;is_staff&quot;</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;超级用户必须设置is_staff=True.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> extra_fields.get(<span class="string">&quot;is_superuser&quot;</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;超级用户必须设置is_superuser=True.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._create_user(realname, email, password, **extra_fields)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OAUser</span>(AbstractBaseUser, PermissionsMixin):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义的User模型</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    realname = models.CharField(max_length=<span class="number">150</span>, unique=<span class="literal">False</span>)  <span class="comment"># 公司体量庞大,可能会出现同名者</span></span><br><span class="line">    email = models.EmailField(unique=<span class="literal">True</span>, blank=<span class="literal">False</span>)  <span class="comment"># 邮箱唯一且不为空</span></span><br><span class="line">    telephone = models.CharField(max_length=<span class="number">20</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    is_staff = models.BooleanField(default=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 只要关注status即可,无须关注is_active</span></span><br><span class="line">    status = models.IntegerField(choices=UserStatusChoices, default=UserStatusChoices.UNACTIVE)</span><br><span class="line">    is_active = models.BooleanField(default=<span class="literal">True</span>)</span><br><span class="line">    date_joined = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    objects = OAUserManager()</span><br><span class="line"></span><br><span class="line">    EMAIL_FIELD = <span class="string">&quot;email&quot;</span></span><br><span class="line">    <span class="comment"># USERNAME_FIELD: 是用来做鉴权的,会把authenticate的username参数传给USERNAME_FIELD指定的字段</span></span><br><span class="line">    <span class="comment"># form django.contrib.auth import authenticate</span></span><br><span class="line">    USERNAME_FIELD = <span class="string">&quot;email&quot;</span></span><br><span class="line">    <span class="comment"># REQUIRED_FIELDS: 指定哪些字段时必须要传的,但是不能重复包含USERNAME_FIELD和EMAIL_FIELD已经设置过的值</span></span><br><span class="line">    REQUIRED_FIELDS = [<span class="string">&quot;realname&quot;</span>, <span class="string">&quot;password&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().clean()</span><br><span class="line">        <span class="variable language_">self</span>.email = <span class="variable language_">self</span>.__class__.objects.normalize_email(<span class="variable language_">self</span>.email)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_full_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.realname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_short_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.realname</span><br></pre></td></tr></table></figure>

<h4 id="setttings-覆盖原有-User-模型"><a href="#setttings-覆盖原有-User-模型" class="headerlink" title="setttings 覆盖原有 User 模型"></a>setttings 覆盖原有 User 模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 覆盖django自带的User模型</span></span><br><span class="line"><span class="comment"># 格式: &#x27;app.&lt;User模型名&gt;&#x27;</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&quot;oaauth.OAUser&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误示例:</span></span><br><span class="line"><span class="comment"># AUTH_USER_MODEL = &#x27;apps.oaauth.models.OAUser&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="模型映射"><a href="#模型映射" class="headerlink" title="模型映射"></a>模型映射</h2><p>终端依次运行:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>若数据库同步成功则显示如下:<br><img src="https://s2.loli.net/2024/08/07/Q15LSmAq2NJrkoD.png"></p>
<h2 id="测试-创建超级用户"><a href="#测试-创建超级用户" class="headerlink" title="测试: 创建超级用户"></a>测试: 创建超级用户</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(venv) PS D:\yourterminal&gt; python manage.py createsuperuser</span><br><span class="line">Email: dianzanjiaguanzhu@qq.com</span><br><span class="line">Realname: dianzanjiaguanzhu</span><br><span class="line">密码: <span class="number">123456</span></span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/08/07/utorH2XTUEKwgJA.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节详细介绍了对 Django 框架中 User 对象的重写过程及其应用。</p>
]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Django5+Vue3:OA系统前后端分离项目实战-项目初始化(1)</title>
    <url>/2024/08/06/Django5-Vue3-OA%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96-1/</url>
    <content><![CDATA[<h1 id="Django5-Vue3-系列文章"><a href="#Django5-Vue3-系列文章" class="headerlink" title="Django5+Vue3 系列文章"></a>Django5+Vue3 系列文章</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此项目采用 Django 框架的 5.0.7 版本进行开发。<br>Django 5.0 支持的 Python 版本为 3.10、3.11 和 3.12。<br>OA 系统系列文章将持续更新，直至项目的 Docker 部署阶段。<br>CSDN 专栏链接: <a href="http://t.csdnimg.cn/oMuU0">~快捷传送门: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<h2 id="pycharm-初始化-django5-项目"><a href="#pycharm-初始化-django5-项目" class="headerlink" title="pycharm 初始化 django5 项目"></a>pycharm 初始化 django5 项目</h2><p><img src="https://s2.loli.net/2024/08/06/nzbqFCoe5DV2Wit.png" alt="image"></p>
<h2 id="创建-MySQL-数据库"><a href="#创建-MySQL-数据库" class="headerlink" title="创建 MySQL 数据库"></a>创建 MySQL 数据库</h2><h3 id="MySQL-创建-oa-数据库"><a href="#MySQL-创建-oa-数据库" class="headerlink" title="MySQL 创建 oa 数据库"></a>MySQL 创建 oa 数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE oa <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br></pre></td></tr></table></figure>

<h3 id="更改项目-settings-配置"><a href="#更改项目-settings-配置" class="headerlink" title="更改项目 settings 配置"></a>更改项目 settings 配置</h3><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ENGINE&quot;</span>: <span class="string">&quot;django.db.backends.mysql&quot;</span>,</span><br><span class="line">        <span class="string">&quot;NAME&quot;</span>: <span class="string">&quot;oa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;USER&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PASSWORD&quot;</span>: <span class="string">&quot;&lt;password&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HOST&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PORT&quot;</span>: <span class="number">3306</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="安装-rest-framework"><a href="#安装-rest-framework" class="headerlink" title="安装 rest_framework"></a>安装 rest_framework</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装rest_framework</span></span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="关闭-CSRF-保护"><a href="#关闭-CSRF-保护" class="headerlink" title="关闭 CSRF 保护"></a>关闭 CSRF 保护</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&quot;django.middleware.security.SecurityMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions.middleware.SessionMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.common.CommonMiddleware&quot;</span>,</span><br><span class="line">    <span class="comment"># 关闭CSRF保护</span></span><br><span class="line">    <span class="comment"># &quot;django.middleware.csrf.CsrfViewMiddleware&quot;,</span></span><br><span class="line">    <span class="string">&quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages.middleware.MessageMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.clickjacking.XFrameOptionsMiddleware&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在本项目中，由于我们不再依赖 Django 模板系统，且所有身份验证流程均通过 JWT Token 实现，因此 CSRF（跨站请求伪造）攻击的威胁已被有效缓解。鉴于此，我们建议禁用 Django 的 CSRF 保护机制。此举不仅简化了前端页面的渲染流程，避免了频繁获取 CSRF Token 的繁琐操作，同时也与我们采用的基于 JWT 的身份验证策略相契合。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本项目开发过程中，我们利用 PyCharm 快速搭建了 Django 5 项目，并成功配置了相应的数据库。同时，对 settings.py 进行了适当调整，以确保项目配置的优化和适配。</p>
]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
