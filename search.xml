<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django5+Vue3:OA系统前后端分离项目实战-跨域请求配置(2)</title>
    <url>/2024/08/06/Django5-Vue3-OA%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE-2/</url>
    <content><![CDATA[<h1 id="Django5-Vue3-系列文章"><a href="#Django5-Vue3-系列文章" class="headerlink" title="Django5+Vue3 系列文章"></a>Django5+Vue3 系列文章</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此项目采用 Django 框架的 5.0.7 版本进行开发。<br>Django 5.0 支持的 Python 版本为 3.10、3.11 和 3.12。<br>OA 系统系列文章将持续更新，直至项目的 Docker 部署阶段。<br>CSDN 专栏链接: <a href="http://t.csdnimg.cn/oMuU0">~快捷传送门: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<h2 id="前后端分离项目中的跨域请求问题"><a href="#前后端分离项目中的跨域请求问题" class="headerlink" title="前后端分离项目中的跨域请求问题"></a>前后端分离项目中的跨域请求问题</h2><p>本项目采用前后端分离架构，前端与后端部署在不同端口，导致它们运行在不同的域名下。例如，前端页面通过<code>http://127.0.0.1:5173</code>访问，而后端服务位于<code>http://127.0.0.1:8000</code>。这种情况下，前端向服务器请求数据时会触发跨域请求。<br>跨域请求的成功与否取决于服务端设置，只有服务端明确允许，前端才能成功访问数据。<br>简而言之，前端与后端的交互需要服务端的跨域配置支持。</p>
<h2 id="跨域请求配置"><a href="#跨域请求配置" class="headerlink" title="跨域请求配置"></a>跨域请求配置</h2><h3 id="下载跨域请求工具"><a href="#下载跨域请求工具" class="headerlink" title="下载跨域请求工具"></a>下载跨域请求工具</h3><p><a href="https://pypi.org/project/django-cors-headers/">django-cors-headers</a> : Django 的一个第三方库，用于处理跨域资源共享（CORS）问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/08/06/GC5BKDebfp7iJnl.png" alt="image"><br><strong>Successfuly installdjango-cors-headers-4.4.0: 下载成功</strong></p>
<p><img src="https://s2.loli.net/2024/08/06/AOHwDdgUeKXV8rJ.png" alt="image"></p>
<h3 id="settings-配置跨域请求应用"><a href="#settings-配置跨域请求应用" class="headerlink" title="settings 配置跨域请求应用"></a>settings 配置跨域请求应用</h3><h4 id="django-cors-headers-安装"><a href="#django-cors-headers-安装" class="headerlink" title="django-cors-headers 安装"></a>django-cors-headers 安装</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装rest_framework</span></span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="comment"># 安装django-cors-headers</span></span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="中间件配置"><a href="#中间件配置" class="headerlink" title="中间件配置"></a>中间件配置</h4><blockquote>
<p><strong>Tips:</strong> CorsMiddleware 应该放在尽可能优先的位置，特别是在任何可以产生响应的中间件之前，比如 Django 的 CommonMiddleware 或 Whitenoise 的 WhiteNoiseMiddleware。如果不在此之前设置，就无法在这些响应中添加 CORS 头信息。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">​​​MIDDLEWARE = [</span><br><span class="line">    <span class="string">&quot;django.middleware.security.SecurityMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions.middleware.SessionMiddleware&quot;</span>,</span><br><span class="line">    <span class="comment"># 中间件按顺序执行,一定要在CommonMiddleware前面,否则会出现跨域请求失败的问题</span></span><br><span class="line">    <span class="string">&quot;corsheaders.middleware.CorsMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.common.CommonMiddleware&quot;</span>,</span><br><span class="line">    <span class="comment"># 关闭CSRF保护</span></span><br><span class="line">    <span class="comment"># &quot;django.middleware.csrf.CsrfViewMiddleware&quot;,</span></span><br><span class="line">    <span class="string">&quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages.middleware.MessageMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.clickjacking.XFrameOptionsMiddleware&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="跨域访问权限配置"><a href="#跨域访问权限配置" class="headerlink" title="跨域访问权限配置"></a>跨域访问权限配置</h4><blockquote>
<p><strong>Tips:</strong> 开发阶段几乎不存在安全问题,设置为 True 便于后续开发</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">​​<span class="comment"># 允许所有域名跨域访问(手动添加至settings.py文件中)</span></span><br><span class="line">CORS_ALLOW_ALL_ORIGINS = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节详细介绍了在 Django 开发过程中遇到的跨域请求问题，并展示了相应的解决方案和配置方法。更多跨域详情请访问官方文档自行阅读 –&gt; <a href="https://pypi.org/project/django-cors-headers/">django-cors-headers 官方文档传送门</a></p>
]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Django5+Vue3:OA系统前后端分离项目实战-修改OAUser模型主键(4)</title>
    <url>/2024/08/07/Django5-Vue3-OA%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E4%BF%AE%E6%94%B9OAUser%E6%A8%A1%E5%9E%8B%E4%B8%BB%E9%94%AE-4/</url>
    <content><![CDATA[<h1 id="Django5-Vue3-系列文章"><a href="#Django5-Vue3-系列文章" class="headerlink" title="Django5+Vue3 系列文章"></a>Django5+Vue3 系列文章</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此项目采用 Django 框架的 5.0.7 版本进行开发。<br>Django 5.0 支持的 Python 版本为 3.10、3.11 和 3.12。<br>OA 系统系列文章将持续更新，直至项目的 Docker 部署阶段。<br>CSDN 专栏链接: <a href="http://t.csdnimg.cn/oMuU0">~快捷传送门: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><h3 id="shortuuid"><a href="#shortuuid" class="headerlink" title="shortuuid"></a><a href="https://pypi.org/project/shortuuid/">shortuuid</a></h3><blockquote>
<p>使用 shortuuid 可以生成短小、唯一、随机的标识符，为数据库提供跨平台兼容性、增强隐私性、减少存储空间和避免 ID 冲突等优势，比默认生成的自动增长的 id 更具有安全性。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install shortuuid</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/08/07/IBsHu3wcfhrEd8b.png"></p>
<h3 id="django-shortuuidfield"><a href="#django-shortuuidfield" class="headerlink" title="django-shortuuidfield"></a><a href="https://pypi.org/project/django-shortuuidfield/">django-shortuuidfield</a></h3><blockquote>
<p>django-shortuuidfield 是一个 Django 应用程序，它提供了一个用于 Django 模型的 ShortUUIDField 字段，该字段使用 shortuuid 库来生成短小且唯一的 UUID。<br>Tips:此项目使用 django-shortuuidfield，已包含 uuid 库无需单&gt;独下载 shortuuid。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-shortuuidfield</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/08/07/fLZ1B5qjAOtvRrh.png"></p>
<h2 id="配置-ShortUUIDField"><a href="#配置-ShortUUIDField" class="headerlink" title="配置 ShortUUIDField"></a>配置 ShortUUIDField</h2><h3 id="从-shortuuidfield-中导入-ShortUUIDField"><a href="#从-shortuuidfield-中导入-ShortUUIDField" class="headerlink" title="从 shortuuidfield 中导入 ShortUUIDField"></a>从 shortuuidfield 中导入 ShortUUIDField</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> shortuuidfield <span class="keyword">import</span> ShortUUIDField</span><br></pre></td></tr></table></figure>

<h3 id="添加至-OAUser-模型"><a href="#添加至-OAUser-模型" class="headerlink" title="添加至 OAUser 模型"></a>添加至 OAUser 模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">uid = ShortUUIDField(primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="重建数据库"><a href="#重建数据库" class="headerlink" title="重建数据库"></a>重建数据库</h2><blockquote>
<p>由于主键的更改会对数据库结构产生重大影响，直接进行迁移可能会导致依赖于 User 表的其他表出现故障。因此，需要先删除所有引用了 User 表的表，然后再重新生成这些表以确保数据库的一致性和功能的完整性。</p>
</blockquote>
<h3 id="MySQL-重建数据库-oa"><a href="#MySQL-重建数据库-oa" class="headerlink" title="MySQL 重建数据库 oa"></a>MySQL 重建数据库 oa</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> oa;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE oa <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br></pre></td></tr></table></figure>

<h3 id="删除残留迁移文件"><a href="#删除残留迁移文件" class="headerlink" title="删除残留迁移文件"></a>删除残留迁移文件</h3><p>迁移文件位于: apps–&gt;oaauth–&gt;migrations–&gt;0001_initial.py<br><img src="https://s2.loli.net/2024/08/07/2FWNKqiZvfQX7lY.png"></p>
<h2 id="模型映射"><a href="#模型映射" class="headerlink" title="模型映射"></a>模型映射</h2><p><em>终端依次执行如下（示例）：</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p><em>检查数据库（示例）：</em><br><img src="https://s2.loli.net/2024/08/07/a4DPKuHkA6gphOz.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节介绍了通过安装 django-shortuuidfield，实现数据库的重新初始化和模型迁移，以 UUID 增强实际情况下企业的信息安全。</p>
]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Django5+Vue3:OA系统前后端分离项目实战-重写User模型(3)</title>
    <url>/2024/08/07/Django5-Vue3-OA%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E9%87%8D%E5%86%99User%E6%A8%A1%E5%9E%8B-3/</url>
    <content><![CDATA[<h1 id="Django5-Vue3-系列文章"><a href="#Django5-Vue3-系列文章" class="headerlink" title="Django5+Vue3 系列文章"></a>Django5+Vue3 系列文章</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此项目采用 Django 框架的 5.0.7 版本进行开发。<br>Django 5.0 支持的 Python 版本为 3.10、3.11 和 3.12。<br>OA 系统系列文章将持续更新，直至项目的 Docker 部署阶段。<br>CSDN 专栏链接: <a href="http://t.csdnimg.cn/oMuU0">~快捷传送门: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<h2 id="国内外-User-模型的差异"><a href="#国内外-User-模型的差异" class="headerlink" title="国内外 User 模型的差异"></a>国内外 User 模型的差异</h2><p>尽管 Django 的 User 模型设计成熟，但由于国内外使用环境差异，存在一些不适用和缺失的功能，例如缺少对手机号的支持，以及国外姓名分为 first_name 和 last_name。为了解决这个问题，我们不直接替换原有的 User 模型，而是选择扩展它。这样，我们可以自定义 User 模型以适应国内环境，同时保留 Django 强大的内建认证系统功能。通过重写 User 对象，我们实现了模型的本地化定制，确保了功能的完整性和扩展性。</p>
<h2 id="重写-User-模型"><a href="#重写-User-模型" class="headerlink" title="重写 User 模型"></a>重写 User 模型</h2><h3 id="终端创建-django-应用"><a href="#终端创建-django-应用" class="headerlink" title="终端创建 django 应用"></a>终端创建 django 应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py startapp oaauth</span><br></pre></td></tr></table></figure>

<p>如果出现如下创建失败，请自行选择 MySQL 数据库驱动程序:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.</span><br><span class="line">Did you install mysqlclient?</span><br></pre></td></tr></table></figure>

<p>从性能上推荐 mysqlclient，从操作简易性推荐使用 pymysql，此处使用 pymysql 示例（终端下载 pymysql）:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请自行手动添加到项目根目录的__init__.py文件中</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时再次运行 python manage.py startapp oaauth，则名为 oaauth 的应用创建成功</p>
</blockquote>
<h3 id="创建-apps-管理包"><a href="#创建-apps-管理包" class="headerlink" title="创建 apps 管理包"></a>创建 apps 管理包</h3><blockquote>
<p>因为项目会创建众多 app 应用，为了方便管理在此创建一个名为 apps 的软件包进行统一管理</p>
</blockquote>
<p>Tips: 创建完成后需将 oaauth 应用文件夹放进 oaauth 文件夹中，如下:</p>
<p><img src="https://s2.loli.net/2024/08/07/2HsQ18kSwvgeTm7.png"></p>
<p><img src="https://s2.loli.net/2024/08/07/aDZPN1Gj2zQSp4l.png"></p>
<h3 id="settings-安装-oaauth-应用"><a href="#settings-安装-oaauth-应用" class="headerlink" title="settings 安装 oaauth 应用"></a>settings 安装 oaauth 应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装rest_framework</span></span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="comment"># 安装django-cors-headers</span></span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;apps.oaauth&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="重写-User-模型-1"><a href="#重写-User-模型-1" class="headerlink" title="重写 User 模型"></a>重写 User 模型</h3><blockquote>
<p>打开 apps –&gt; oaauth –&gt;models.py 文件</p>
</blockquote>
<h4 id="导入-User-模型"><a href="#导入-User-模型" class="headerlink" title="导入 User 模型"></a>导入 User 模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br></pre></td></tr></table></figure>

<h4 id="复制-User-模型"><a href="#复制-User-模型" class="headerlink" title="复制 User 模型"></a>复制 User 模型</h4><blockquote>
<p>由于 User 模型基于 AbstractUser 扩展，而 AbstractUser 又继承自 AbstractBaseUser 和 PermissionsMixin，我们选择在 AbstractUser 类上进行重写，复制其代码以实现自定义。</p>
</blockquote>
<h4 id="重写-User-模型-2"><a href="#重写-User-模型-2" class="headerlink" title="重写 User 模型"></a>重写 User 模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">​​<span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, AbstractBaseUser, PermissionsMixin, BaseUserManager</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers <span class="keyword">import</span> make_password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserStatusChoices</span>(models.IntegerChoices):</span><br><span class="line">    <span class="comment"># 已经激活</span></span><br><span class="line">    ACTIVED = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 没有激活</span></span><br><span class="line">    UNACTIVE = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 被锁定</span></span><br><span class="line">    LOCKED = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OAUserManager</span>(<span class="title class_ inherited__">BaseUserManager</span>):</span><br><span class="line">    use_in_migrations = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 密码源自于AbstractBaseUser类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_create_user</span>(<span class="params">self, realname, email, password, **extra_fields</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建用户</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> realname:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;必须设置真实姓名! &quot;</span>)</span><br><span class="line">        email = <span class="variable language_">self</span>.normalize_email(email)  <span class="comment"># 邮箱标准化</span></span><br><span class="line">        user = <span class="variable language_">self</span>.model(realname=realname, email=email, **extra_fields)  <span class="comment"># 此处的self.model实际上等于OAUser</span></span><br><span class="line">        user.password = make_password(password)</span><br><span class="line">        user.save(using=<span class="variable language_">self</span>._db)</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_user</span>(<span class="params">self, realname, email=<span class="literal">None</span>, password=<span class="literal">None</span>, **extra_fields</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建普通用户</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        extra_fields.setdefault(<span class="string">&quot;is_staff&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">        extra_fields.setdefault(<span class="string">&quot;is_superuser&quot;</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._create_user(realname, email, password, **extra_fields)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_superuser</span>(<span class="params">self, realname, email=<span class="literal">None</span>, password=<span class="literal">None</span>, **extra_fields</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建超级用户</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        extra_fields.setdefault(<span class="string">&quot;is_staff&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">        extra_fields.setdefault(<span class="string">&quot;is_superuser&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">        extra_fields.setdefault(<span class="string">&quot;status&quot;</span>, UserStatusChoices.ACTIVED)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> extra_fields.get(<span class="string">&quot;is_staff&quot;</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;超级用户必须设置is_staff=True.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> extra_fields.get(<span class="string">&quot;is_superuser&quot;</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;超级用户必须设置is_superuser=True.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._create_user(realname, email, password, **extra_fields)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OAUser</span>(AbstractBaseUser, PermissionsMixin):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义的User模型</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    realname = models.CharField(max_length=<span class="number">150</span>, unique=<span class="literal">False</span>)  <span class="comment"># 公司体量庞大,可能会出现同名者</span></span><br><span class="line">    email = models.EmailField(unique=<span class="literal">True</span>, blank=<span class="literal">False</span>)  <span class="comment"># 邮箱唯一且不为空</span></span><br><span class="line">    telephone = models.CharField(max_length=<span class="number">20</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    is_staff = models.BooleanField(default=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 只要关注status即可,无须关注is_active</span></span><br><span class="line">    status = models.IntegerField(choices=UserStatusChoices, default=UserStatusChoices.UNACTIVE)</span><br><span class="line">    is_active = models.BooleanField(default=<span class="literal">True</span>)</span><br><span class="line">    date_joined = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    objects = OAUserManager()</span><br><span class="line"></span><br><span class="line">    EMAIL_FIELD = <span class="string">&quot;email&quot;</span></span><br><span class="line">    <span class="comment"># USERNAME_FIELD: 是用来做鉴权的,会把authenticate的username参数传给USERNAME_FIELD指定的字段</span></span><br><span class="line">    <span class="comment"># form django.contrib.auth import authenticate</span></span><br><span class="line">    USERNAME_FIELD = <span class="string">&quot;email&quot;</span></span><br><span class="line">    <span class="comment"># REQUIRED_FIELDS: 指定哪些字段时必须要传的,但是不能重复包含USERNAME_FIELD和EMAIL_FIELD已经设置过的值</span></span><br><span class="line">    REQUIRED_FIELDS = [<span class="string">&quot;realname&quot;</span>, <span class="string">&quot;password&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clean</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().clean()</span><br><span class="line">        <span class="variable language_">self</span>.email = <span class="variable language_">self</span>.__class__.objects.normalize_email(<span class="variable language_">self</span>.email)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_full_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.realname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_short_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.realname</span><br></pre></td></tr></table></figure>

<h4 id="setttings-覆盖原有-User-模型"><a href="#setttings-覆盖原有-User-模型" class="headerlink" title="setttings 覆盖原有 User 模型"></a>setttings 覆盖原有 User 模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 覆盖django自带的User模型</span></span><br><span class="line"><span class="comment"># 格式: &#x27;app.&lt;User模型名&gt;&#x27;</span></span><br><span class="line">AUTH_USER_MODEL = <span class="string">&quot;oaauth.OAUser&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误示例:</span></span><br><span class="line"><span class="comment"># AUTH_USER_MODEL = &#x27;apps.oaauth.models.OAUser&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="模型映射"><a href="#模型映射" class="headerlink" title="模型映射"></a>模型映射</h2><p>终端依次运行:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>若数据库同步成功则显示如下:<br><img src="https://s2.loli.net/2024/08/07/Q15LSmAq2NJrkoD.png"></p>
<h2 id="测试-创建超级用户"><a href="#测试-创建超级用户" class="headerlink" title="测试: 创建超级用户"></a>测试: 创建超级用户</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(venv) PS D:\yourterminal&gt; python manage.py createsuperuser</span><br><span class="line">Email: dianzanjiaguanzhu@qq.com</span><br><span class="line">Realname: dianzanjiaguanzhu</span><br><span class="line">密码: <span class="number">123456</span></span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/08/07/utorH2XTUEKwgJA.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节详细介绍了对 Django 框架中 User 对象的重写过程及其应用。</p>
]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Django5+Vue3:OA系统前后端分离项目实战-项目初始化(1)</title>
    <url>/2024/08/06/Django5-Vue3-OA%E7%B3%BB%E7%BB%9F%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96-1/</url>
    <content><![CDATA[<h1 id="Django5-Vue3-系列文章"><a href="#Django5-Vue3-系列文章" class="headerlink" title="Django5+Vue3 系列文章"></a>Django5+Vue3 系列文章</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>此项目采用 Django 框架的 5.0.7 版本进行开发。<br>Django 5.0 支持的 Python 版本为 3.10、3.11 和 3.12。<br>OA 系统系列文章将持续更新，直至项目的 Docker 部署阶段。<br>CSDN 专栏链接: <a href="http://t.csdnimg.cn/oMuU0">~快捷传送门: 留个赞再走呗 😭! ~</a></p>
</blockquote>
<h2 id="pycharm-初始化-django5-项目"><a href="#pycharm-初始化-django5-项目" class="headerlink" title="pycharm 初始化 django5 项目"></a>pycharm 初始化 django5 项目</h2><p><img src="https://s2.loli.net/2024/08/06/nzbqFCoe5DV2Wit.png" alt="image"></p>
<h2 id="创建-MySQL-数据库"><a href="#创建-MySQL-数据库" class="headerlink" title="创建 MySQL 数据库"></a>创建 MySQL 数据库</h2><h3 id="MySQL-创建-oa-数据库"><a href="#MySQL-创建-oa-数据库" class="headerlink" title="MySQL 创建 oa 数据库"></a>MySQL 创建 oa 数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE oa <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br></pre></td></tr></table></figure>

<h3 id="更改项目-settings-配置"><a href="#更改项目-settings-配置" class="headerlink" title="更改项目 settings 配置"></a>更改项目 settings 配置</h3><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ENGINE&quot;</span>: <span class="string">&quot;django.db.backends.mysql&quot;</span>,</span><br><span class="line">        <span class="string">&quot;NAME&quot;</span>: <span class="string">&quot;oa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;USER&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PASSWORD&quot;</span>: <span class="string">&quot;&lt;password&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HOST&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PORT&quot;</span>: <span class="number">3306</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="安装-rest-framework"><a href="#安装-rest-framework" class="headerlink" title="安装 rest_framework"></a>安装 rest_framework</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&quot;django.contrib.admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.auth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.contenttypes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.staticfiles&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装rest_framework</span></span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="关闭-CSRF-保护"><a href="#关闭-CSRF-保护" class="headerlink" title="关闭 CSRF 保护"></a>关闭 CSRF 保护</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&quot;django.middleware.security.SecurityMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.sessions.middleware.SessionMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.common.CommonMiddleware&quot;</span>,</span><br><span class="line">    <span class="comment"># 关闭CSRF保护</span></span><br><span class="line">    <span class="comment"># &quot;django.middleware.csrf.CsrfViewMiddleware&quot;,</span></span><br><span class="line">    <span class="string">&quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.contrib.messages.middleware.MessageMiddleware&quot;</span>,</span><br><span class="line">    <span class="string">&quot;django.middleware.clickjacking.XFrameOptionsMiddleware&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在本项目中，由于我们不再依赖 Django 模板系统，且所有身份验证流程均通过 JWT Token 实现，因此 CSRF（跨站请求伪造）攻击的威胁已被有效缓解。鉴于此，我们建议禁用 Django 的 CSRF 保护机制。此举不仅简化了前端页面的渲染流程，避免了频繁获取 CSRF Token 的繁琐操作，同时也与我们采用的基于 JWT 的身份验证策略相契合。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本项目开发过程中，我们利用 PyCharm 快速搭建了 Django 5 项目，并成功配置了相应的数据库。同时，对 settings.py 进行了适当调整，以确保项目配置的优化和适配。</p>
]]></content>
      <categories>
        <category>前后端分离</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
